1.BaseHandler.java 
package com.liqi.eventbushandler.handler;

import java.lang.ref.SoftReference;

import android.os.Handler;
import android.os.Message;
import android.util.SparseArray;

/**
 * 用集合存储软引用调用的handler(核心)
 * 
 * @author Liqi
 * 
 */
public class BaseHandler extends Handler implements BaseHandlerMethod {
	private static BaseHandler baseHandler;
	private BaseHandlerGetKey baseHandlerGetKey;
	private SparseArray<SoftReference<BaseHandlerUpDate>> arrayReference;
	private FactoryOperateInterface factoryOperateInterface;

	public void setFactoryOperateInterface(
			FactoryOperateInterface factoryOperateInterface) {
		this.factoryOperateInterface = factoryOperateInterface;
	}

	/**
	 * 获取handler对象
	 * 
	 * @param activity
	 * @return
	 */
	public synchronized static BaseHandler getBaseHandler() {
		synchronized (BaseHandler.class.getName()) {
			if (baseHandler == null) {
				baseHandler = new BaseHandler();
			}
		}
		return baseHandler;
	}

	private BaseHandler() {
		if (null == arrayReference)
			arrayReference = new SparseArray<SoftReference<BaseHandlerUpDate>>();
	}

	@Override
	public void handleMessage(Message msg) {
		if (null != arrayReference && arrayReference.size() > 0) {
			if (null != baseHandlerGetKey) {
				SoftReference<BaseHandlerUpDate> reference = arrayReference
						.get(baseHandlerGetKey.handlerGetKey());
				if (null != reference) {
					BaseHandlerUpDate baseActivity = reference.get();
					if (null != baseActivity)
						baseActivity.handleMessage(msg);
				}
			} else
				System.out.println("handleMessage>>>>handler获取Key接口为空");
		}
	}

	/**
	 * 把传进来的对象通过塞入软引用添加进SparseArray集合里面
	 * 
	 * @param activity
	 */
	@Override
	public void addSparseArray(BaseHandlerUpDate activity) {
		if (null != baseHandlerGetKey) {
			arrayReference.put(baseHandlerGetKey.handlerGetKey(),
					new SoftReference<BaseHandlerUpDate>(activity));
		} else
			System.out.println("addSparseArray>>>handler获取Key接口为空");
	}

	/**
	 * 发送message信息个handler
	 * 
	 * @param tag
	 * @param obj
	 */
	@Override
	public void putMessage(int tag, Object obj) {
		Message message = this.obtainMessage();
		message.what = tag;
		message.obj = obj;
		this.sendMessage(message);
	}

	/**
	 * 清除SparseArray集合中指定键的软引用的数据 (!--Key是通过接口获取的，只需要调用此方法即可)
	 */
	@Override
	public void removeKeyData() {
		if (null != arrayReference && arrayReference.size() > 0) {
			if (null != baseHandlerGetKey) {
				SoftReference<BaseHandlerUpDate> reference = arrayReference
						.get(baseHandlerGetKey.handlerGetKey());
				if (null != reference) {
					reference.clear();
					arrayReference.remove(baseHandlerGetKey.handlerGetKey());
					if (factoryOperateInterface != null) {
						factoryOperateInterface.removeFactoryKeyData();
					}
				}
			} else
				System.out.println("removeKeyData>>>handler获取Key接口为空");
		}
	}

	/**
	 * 清除SparseArray集合里面所有值
	 */
	@Override
	public void removeAll() {
		if (null != arrayReference && arrayReference.size() > 0) {
			for (int i = 0; i < arrayReference.size(); i++) {
				arrayReference.valueAt(i).clear();
			}
			arrayReference.clear();
			if (factoryOperateInterface != null) {
				factoryOperateInterface.removeAllFactoryData();
			}
		}
	}

	@Override
	public void setBaseHandlerGetKey(BaseHandlerGetKey baseHandlerGetKey) {
		this.baseHandlerGetKey = baseHandlerGetKey;
	}

	/**
	 * Handler中SparseArray集合Key设置接口
	 * 
	 * @author Liqi
	 * 
	 */
	public interface BaseHandlerGetKey {
		/**
		 * 设置SparseArray集合存入的Key
		 * 
		 * @return
		 */
		public int handlerGetKey();
	}
}
2.BaseHandlerMethod.java
package com.liqi.eventbushandler.handler;
import com.liqi.eventbushandler.base.BaseHandler.BaseHandlerGetKey;
  
  /**
 - * BaseHandler调用方法接口
 + * BaseHandler调用方法接口（核心）
   * 
   * @author Liqi
   * 
 @@ -25,7 +25,7 @@
  	public void putMessage(int tag, Object obj);
  
  	/**
 -	 * 清除SparseArray集合中指定键的弱引用的数据 (!--Key是通过接口获取的，只需要调用此方法即可)
 +	 * 清除SparseArray集合中指定键的软弱引用的数据 (!--Key是通过接口获取的，只需要调用此方法即可)
  	 */
  	public void removeKeyData();
  
 	/**
 	 * 清除SparseArray集合里面所有值
 	 */
 	public void removeAll();
 
 	/**
 	 * 赋值获取Key接口
 	 * 
 	 * @param baseHandlerGetKey
 	 */
 	public void setBaseHandlerGetKey(BaseHandlerGetKey baseHandlerGetKey);
 }
3.BaseHandlerUpDate.java
package com.liqi.eventbushandler.handler;
 import android.os.Message;
  
  /**
 - * handler回调更新接口
 + * handler回调更新接口（核心）
   * 
   * @author Liqi
   * 
  */
 public interface BaseHandlerUpDate {
 	/**
 	 * handler回调接口
 	 * @param msg
 	 */
 	public void handleMessage(Message msg);
 }
4.BaseHandlerOperate.java
package com.liqi.eventbushandler.handler;
 import com.liqi.eventbushandler.base.BaseHandler.BaseHandlerGetKey;
  
  /**
 - * BaseHandler操作对象
 + * BaseHandler操作对象（核心）
   * 
   * @author Liqi
   * 
  */
 public class BaseHandlerOperate implements BaseHandlerGetKey {
 	// handler往集合里面增加对象的key
 	protected int handlerKey;
 	private BaseHandlerMethod handler;
 	private static BaseHandlerOperate handlerOperate;
 
 	/**
 	 * 获取hBaseHandler操作对象
 	 * 
 	 * @return
 	 */
 	public static BaseHandlerOperate getBaseHandlerOperate() {
 		synchronized (BaseHandlerOperate.class.getName()) {
 			if (handlerOperate == null) {
 				handlerOperate = new BaseHandlerOperate();
 			}
 		}
 		return handlerOperate;
 	}
 
 	private BaseHandlerOperate() {
 		handler = BaseHandler.getBaseHandler();
 		handler.setBaseHandlerGetKey(this);
 	}
 
 	/**
 	 * 把当前对象对象添加到指定键里面
 	 * 
 	 * @param handlerKey
 	 *            BaseHandler-存储对象的Key
 	 */
 	public BaseHandlerOperate addKeyHandler(int handlerKey, BaseHandlerUpDate handlerUpDate) {
 		this.handlerKey = handlerKey;
 		handler.addSparseArray(handlerUpDate);
 		return this;
 	}
 
 	/**
 	 * 给指定的handler发送message
 	 * 
 	 * @param handlerKey
 	 *            BaseHandler-取出对象的Key
 	 * @param tag
 	 *            Message标识
 	 * @param obj
 	 *            MessageObj数据源
 	 */
 	public BaseHandlerOperate putMessageKey(int handlerKey, int tag, Object obj) {
 		this.handlerKey = handlerKey;
 		handler.putMessage(tag, obj);
 		return this;
 	}
 
 	/**
 	 * 移除BaseHandler里面的指定key对象
 	 * 
 	 * @param handlerKey
 	 *            BaseHandler-取出对象的Key
 	 */
 	public BaseHandlerOperate removeKeyData(int handlerKey) {
 		this.handlerKey = handlerKey;
 		handler.removeKeyData();
 		return this;
 	}
 
 	/**
 	 * 移除所有的handler里面的对象
 	 */
 	public BaseHandlerOperate removeAll() {
 		handler.removeAll();
 		return this;
 	}
 
 	public BaseHandlerMethod getBaseHandler() {
 		return handler;
 	}
 
 	@Override
 	public int handlerGetKey() {
 		return handlerKey;
 	}
 }
5.BaseHandlerFactoryId.java
package com.liqi.eventbushandler.handler;

import java.util.Hashtable;

/**
 * 专门生产BaseHandler存储键ID对象
 * 
 * @author Liqi
 * 
 */
public class BaseHandlerFactoryId {
	// 初始化键ID值
	private int idIni = 0X8;
	// 工厂存储键ID值容器
	private Hashtable<Class<?>, Integer> hIds;
	private static BaseHandlerFactoryId baseHandlerIdObj;

	public synchronized static BaseHandlerFactoryId getBaseHandlerFactoryId() {
		return null == baseHandlerIdObj ? new BaseHandlerFactoryId()
				: baseHandlerIdObj;
	}

	private BaseHandlerFactoryId() {
		hIds = null == hIds ? new Hashtable<Class<?>, Integer>() : hIds;
	}

	/**
	 * 把指点key从容器里面移除
	 * 
	 * @param clazzKey
	 */
	public void removeKeyData(Class<?> clazzKey) {
		hIds.remove(clazzKey);
	}

	/**
	 * 清空存储容器
	 */
	public void removeAll() {
		hIds.clear();
		hIds = null;
	}

	/**
	 * 获取class对应的ID值
	 * 
	 * @param clazzKey
	 *            获取ID值的class
	 * @return
	 */
	public int getFactoryId(Class<?> clazzKey) {
		if (hIds.containsKey(clazzKey)) {
			return hIds.get(clazzKey);
		} else {
			return addClassID(clazzKey);
		}
	}

	/**
	 * 把对应的class的ID值存储进容器里面
	 * 
	 * @param clazzKey
	 * @return
	 */
	private synchronized int addClassID(Class<?> clazzKey) {
		int values = getValues();
		synchronized (this) {
			hIds.put(clazzKey, values);
		}
		return values;
	}

	/**
	 * 保证容器里面的ID值唯一性
	 */
	private synchronized int getValues() {
		if (hIds.containsValue(++idIni)) {
			getValues();
		}
		return idIni;
	}
}
6.FactoryOperateInterface.java
package com.liqi.eventbushandler.handler;

/**
 * 调用工厂方法接口
 * 
 * @author Liqi
 * 
 */
public interface FactoryOperateInterface {
	/**
	 * 删除指定键数据
	 */
	public void removeFactoryKeyData();

	/**
	 * 删除全部数据
	 */
	public void removeAllFactoryData();
}
